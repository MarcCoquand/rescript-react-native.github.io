(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{189:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),p=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||r;return t?i.a.createElement(m,l(l({ref:n},s),{},{components:t})):i.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),i=t(7),r=(t(0),t(189)),o={id:"layoutanimation",title:"LayoutAnimation"},l={unversionedId:"layoutanimation",id:"layoutanimation",isDocsHomePage:!1,title:"LayoutAnimation",description:"LayoutAnimation API offers a simpler alternative to Animated API. Instead of",source:"@site/docs/layoutanimation.md",sourceDirName:".",slug:"/layoutanimation",permalink:"/docs/layoutanimation",editUrl:"https://github.com/rescript-react-native/rescript-react-native.github.io/edit/src/docs/layoutanimation.md",version:"current",frontMatter:{id:"layoutanimation",title:"LayoutAnimation"},sidebar:"api",previous:{title:"Keyboard",permalink:"/docs/keyboard"},next:{title:"Linking",permalink:"/docs/linking"}},c=[{value:"Methods",id:"methods",children:[]},{value:"Types",id:"types",children:[]},{value:"Presets",id:"presets",children:[]},{value:"Example",id:"example",children:[]}],s={toc:c};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"LayoutAnimation")," API offers a simpler alternative to ",Object(r.b)("inlineCode",{parentName:"p"},"Animated")," API. Instead of\ndirectly manipulating values for various style props, it suffices to specify the\nanimation to be run before the next render. Specification of the animation\nshould happen in the reducer, before ",Object(r.b)("inlineCode",{parentName:"p"},"state")," is updated."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"LayoutAnimation")," is still experimental on Android and needs to be explicitly\nenabled with the ",Object(r.b)("inlineCode",{parentName:"p"},"UIManager")," method ",Object(r.b)("inlineCode",{parentName:"p"},"setLayoutAnimationEnabledExperimental"),".\nHowever, as that method should be removed when ",Object(r.b)("inlineCode",{parentName:"p"},"LayoutAnimation")," is no longer\nexperimental, the external declaration for it wraps its type in ",Object(r.b)("inlineCode",{parentName:"p"},"option")," to\navoid runtime errors when that happens. ",Object(r.b)("inlineCode",{parentName:"p"},"LayoutAnimation")," may be enabled, if it\nis not already enabled by default, by means of a statement such as:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"switch UIManager.setLayoutAnimationEnabledExperimental {\n| None => ()\n| Some(setEnabled) => setEnabled(true)\n}\n")),Object(r.b)("h2",{id:"methods"},"Methods"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"configureNext")," is the method to specify the animation, takes an argument of\ntype ",Object(r.b)("inlineCode",{parentName:"li"},"layoutAnimationConfig"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"configureNext: layoutAnimationConfig => unit\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"configureNextWithEndCallback")," is a convenience function, which allows\nspecification of a callback function (of type ",Object(r.b)("inlineCode",{parentName:"li"},"unit => unit"),") to be run after\nthe animation, in addition to ",Object(r.b)("inlineCode",{parentName:"li"},"layoutAnimationConfig"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"configureNextWithEndCallback: (layoutAnimationConfig, unit => unit) => unit\n")),Object(r.b)("h2",{id:"types"},"Types"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"layoutAnimationConfig")," can be created with the ",Object(r.b)("inlineCode",{parentName:"p"},"layoutAnimationConfig"),"\nconstructor"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"layoutAnimationConfig:\n  (\n    ~duration: float,\n    ~create: animationConfig=?,\n    ~update: animationConfig=?,\n    ~delete: animationConfig=?,\n    unit\n  ) => layoutAnimationConfig\n")),Object(r.b)("p",null,"or by means of the helper function ",Object(r.b)("inlineCode",{parentName:"p"},"create")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"create:\n  (\n    ~duration: float,\n    ~_type: [\n      | #spring\n      | #linear\n      | #easeInEaseOut\n      | #easeIn\n      | #easeOut\n      | #keyboard\n    ],\n    ~property: [ | #opacity | #scaleX | #scaleY | #scaleXY]\n  ) => layoutAnimationConfig\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"animationConfig")," can in turn be created with the ",Object(r.b)("inlineCode",{parentName:"p"},"animationConfig")," constructor"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"animationConfig:\n  (\n    ~duration: float=?,\n    ~delay: float=?,\n    ~springDamping: float=?,\n    ~initialVelocity: float=?,\n    ~_type: [\n      | #spring\n      | #linear\n      | #easeInEaseOut\n      | #easeIn\n      | #easeOut\n      | #keyboard\n    ]=?,\n    ~property: [ | #opacity | #scaleX | #scaleY | #scaleXY]=?,\n    unit\n  ) => animationConfig\n")),Object(r.b)("h2",{id:"presets"},"Presets"),Object(r.b)("p",null,"There are presets for ",Object(r.b)("inlineCode",{parentName:"p"},"linear"),", ",Object(r.b)("inlineCode",{parentName:"p"},"spring")," and ",Object(r.b)("inlineCode",{parentName:"p"},"easeInEaseOut")," transitions which\nallow a very straightforward way to setup animation. Presets may either be\npassed as ready-made ",Object(r.b)("inlineCode",{parentName:"p"},"layoutAnimationConfig")," to ",Object(r.b)("inlineCode",{parentName:"p"},"configureNext")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"configureNextWithEndCallback")," as below"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"LayoutAnimation.configureNext(LayoutAnimation.Presets.spring)\n")),Object(r.b)("p",null,"or equivalently as already passed to ",Object(r.b)("inlineCode",{parentName:"p"},"configureNext")," as"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"LayoutAnimation.spring()\n\n")),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"The example below illustrates animated transition (",Object(r.b)("inlineCode",{parentName:"p"},"spring"),") between two views,\nsuch as registration and login forms. Animation is specified in the reducer, as\nbelow, before state is returned."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},'open ReactNative\n\nlet windowWidth = Dimensions.get(#window).width\n\ntype state = {register: bool}\n\ntype action = ToggleRegister\n\nlet styles = {\n  open Style\n  StyleSheet.create({\n    "container": style(~flex=1., ~flexDirection=#column, ()),\n    "screen": style(~width=windowWidth->dp, ()),\n  })\n}\n\n@react.component\nlet make = () => {\n  let (state, dispatch) = React.useReducer((state, action) =>\n    switch action {\n    | ToggleRegister =>\n      // Animation should be specified here, before state is updated:\n      LayoutAnimation.configureNext(\n        LayoutAnimation.create(\n          ~duration=500.,\n          ~_type=#spring,\n          ~property=#opacity,\n        ),\n      )\n      // update of the state happens below:\n      {register: !state.register\xe0\n    }\n  , {register: false})\n\n  <View style={styles["container"]}>\n    <View\n      style={\n        open Style\n        style(\n          ~flex=1.,\n          ~width=(2.0 *. windowWidth)->dp,\n          ~left=(state.register ? 0. : 0. -. windowWidth)->dp,\n          ~flexDirection=#row,\n          (),\n        )\n      }>\n      <View style={styles["screen"]}> <Register /> </View>\n      <View style={styles["screen"]}> <Login /> </View>\n    </View>\n    <Button onPress={_ => dispatch(ToggleRegister)} title=`Toggle` />\n  </View>\n}\n')),Object(r.b)("p",null,"Note that above animation specification is that of the ",Object(r.b)("inlineCode",{parentName:"p"},"spring")," preset.\nAccordingly, the animation could have been specified as"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"LayoutAnimation.configureNext(LayoutAnimation.Presets.spring)\n")),Object(r.b)("p",null,"or equivalently as"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"LayoutAnimation.spring()\n")))}p.isMDXComponent=!0}}]);