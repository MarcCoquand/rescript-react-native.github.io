(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{128:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return o})),t.d(n,"default",(function(){return b}));var i=t(3),a=t(7),r=(t(0),t(189)),c={id:"accessibilityinfo",title:"AccessibilityInfo",officialDoc:"https://reactnative.dev/docs/accessibilityinfo"},l={unversionedId:"accessibilityinfo",id:"accessibilityinfo",isDocsHomePage:!1,title:"AccessibilityInfo",description:"Types",source:"@site/docs/accessibilityinfo.md",sourceDirName:".",slug:"/accessibilityinfo",permalink:"/docs/accessibilityinfo",editUrl:"https://github.com/rescript-react-native/rescript-react-native.github.io/edit/src/docs/accessibilityinfo.md",version:"current",frontMatter:{id:"accessibilityinfo",title:"AccessibilityInfo",officialDoc:"https://reactnative.dev/docs/accessibilityinfo"},sidebar:"api",previous:{title:"APIs",permalink:"/docs/apis"},next:{title:"ActionSheetIOS",permalink:"/docs/actionsheetios"}},o=[{value:"Types",id:"types",children:[{value:"<code>announcementResult</code>",id:"announcementresult",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>isBoldTextEnabled</code>",id:"isboldtextenabled",children:[]},{value:"<code>isGrayscaleEnabled</code>",id:"isgrayscaleenabled",children:[]},{value:"<code>isInvertColorsEnabled</code>",id:"isinvertcolorsenabled",children:[]},{value:"<code>isReduceMotionEnabled</code>",id:"isreducemotionenabled",children:[]},{value:"<code>isReduceTransparencyEnabled</code>",id:"isreducetransparencyenabled",children:[]},{value:"<code>isScreenReaderEnabled</code>",id:"isscreenreaderenabled",children:[]},{value:"<code>setAccessibilityFocus</code>",id:"setaccessibilityfocus",children:[]},{value:"<code>announceForAccessibility</code>",id:"announceforaccessibility",children:[]},{value:"<code>addEventListener</code>",id:"addeventlistener",children:[]},{value:"<code>removeEventListener</code>",id:"removeeventlistener",children:[]}]}],s={toc:o};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"types"},"Types"),Object(r.b)("h3",{id:"announcementresult"},Object(r.b)("inlineCode",{parentName:"h3"},"announcementResult")),Object(r.b)("p",null,"Passed to the handler of the ",Object(r.b)("inlineCode",{parentName:"p"},"`announcementFinished")," event."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"type announcementResult = {\n  announcement: string,\n  success: bool,\n}\n")),Object(r.b)("p",null,"where ",Object(r.b)("inlineCode",{parentName:"p"},"announcement")," is the string announced by the screen reader and ",Object(r.b)("inlineCode",{parentName:"p"},"success"),"\nis a ",Object(r.b)("inlineCode",{parentName:"p"},"bool")," indicating whether the announcement was successfully made."),Object(r.b)("h2",{id:"methods"},"Methods"),Object(r.b)("h3",{id:"isboldtextenabled"},Object(r.b)("inlineCode",{parentName:"h3"},"isBoldTextEnabled")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"iOS only")),Object(r.b)("p",null,"To query whether bold text is currently enabled. Promise resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," when\nbold text is enabled and ",Object(r.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"isBoldTextEnabled: unit => Js.Promise.t(bool)\n")),Object(r.b)("h3",{id:"isgrayscaleenabled"},Object(r.b)("inlineCode",{parentName:"h3"},"isGrayscaleEnabled")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"iOS only")),Object(r.b)("p",null,"To query whether grayscale is currently enabled. Promise resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," when\ngrayscale is enabled and ",Object(r.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"isGrayscaleEnabled: unit => Js.Promise.t(bool)\n")),Object(r.b)("h3",{id:"isinvertcolorsenabled"},Object(r.b)("inlineCode",{parentName:"h3"},"isInvertColorsEnabled")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"iOS only")),Object(r.b)("p",null,"To query whether invert colors is currently enabled. Promise resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"\nwhen invert colors is enabled and ",Object(r.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"isInvertColorsEnabled: unit => Js.Promise.t(bool)\n")),Object(r.b)("h3",{id:"isreducemotionenabled"},Object(r.b)("inlineCode",{parentName:"h3"},"isReduceMotionEnabled")),Object(r.b)("p",null,"To query whether reduce motion is currently enabled. Promise resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"\nwhen reduce motion is enabled and ",Object(r.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"isReduceMotionEnabled: unit => Js.Promise.t(bool)\n")),Object(r.b)("h3",{id:"isreducetransparencyenabled"},Object(r.b)("inlineCode",{parentName:"h3"},"isReduceTransparencyEnabled")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"iOS only")),Object(r.b)("p",null,"To query whether reduce transparency is currently enabled. Promise resolves to\n",Object(r.b)("inlineCode",{parentName:"p"},"true")," when reduce transparency is enabled and ",Object(r.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"isReduceTransparencyEnabled: unit => Js.Promise.t(bool)\n")),Object(r.b)("h3",{id:"isscreenreaderenabled"},Object(r.b)("inlineCode",{parentName:"h3"},"isScreenReaderEnabled")),Object(r.b)("p",null,"To query whether screen reader is currently enabled. Promise resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"\nwhen screen reader is enabled and ",Object(r.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"isScreenReaderEnabled: unit => Js.Promise.t(bool)\n")),Object(r.b)("h3",{id:"setaccessibilityfocus"},Object(r.b)("inlineCode",{parentName:"h3"},"setAccessibilityFocus")),Object(r.b)("p",null,"To set accessibility focus to a React component, identified by its ",Object(r.b)("inlineCode",{parentName:"p"},"nodeHandle"),".\nOn Android, this is equivalent to\n",Object(r.b)("inlineCode",{parentName:"p"},"UIManager.sendAccessibilityEvent(reactTag, UIManager.AccessibilityEventTypes.typeViewFocused)"),";"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"setAccessibilityFocus: NativeTypes.nodeHandle => unit\n")),Object(r.b)("h3",{id:"announceforaccessibility"},Object(r.b)("inlineCode",{parentName:"h3"},"announceForAccessibility")),Object(r.b)("p",null,"To post a string to be announced by the screen reader."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"announceForAccessibility: string => unit\n")),Object(r.b)("h3",{id:"addeventlistener"},Object(r.b)("inlineCode",{parentName:"h3"},"addEventListener")),Object(r.b)("p",null,"Add an event handler."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rescript"},"addEventListener: [\n    | #boldTextChanged(bool => unit)\n    | #grayscaleChanged(bool => unit)\n    | #invertColorsChanged(bool => unit)\n    | #reduceMotionChanged(bool => unit)\n    | #screenReaderChanged(bool => unit)\n    | #reduceTransparencyChanged(bool => unit)\n    | #announcementFinished(announcementResult => unit)\n  ] => unit\n")),Object(r.b)("p",null,"Supported events:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"boldTextChanged(bool => unit)"),": ",Object(r.b)("em",{parentName:"li"},"iOS only"),". Fires when state of the bold text\ntoggle changes. The argument to the event handler is a ",Object(r.b)("inlineCode",{parentName:"li"},"bool")," which is ",Object(r.b)("inlineCode",{parentName:"li"},"true"),"\nwhen bold text is enabled and ",Object(r.b)("inlineCode",{parentName:"li"},"false")," otherwise."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"grayscaleChanged(bool => unit)"),": ",Object(r.b)("em",{parentName:"li"},"iOS only"),". Fires when state of the gray\nscale toggle changes. The argument to the event handler is a ",Object(r.b)("inlineCode",{parentName:"li"},"bool")," which is\n",Object(r.b)("inlineCode",{parentName:"li"},"true")," when gray scale is enabled and ",Object(r.b)("inlineCode",{parentName:"li"},"false")," otherwise."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"invertColorsChanged(bool => unit)"),": ",Object(r.b)("em",{parentName:"li"},"iOS only"),". Fires when state of the\ninvert colors toggle changes. The argument to the event handler is a ",Object(r.b)("inlineCode",{parentName:"li"},"bool"),"\nwhich is ",Object(r.b)("inlineCode",{parentName:"li"},"true")," when invert colors is enabled and ",Object(r.b)("inlineCode",{parentName:"li"},"false")," otherwise."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"reduceMotionChanged(bool => unit)"),": Fires when state of the reduce motion\ntoggle changes. The argument to the event handler is a ",Object(r.b)("inlineCode",{parentName:"li"},"bool")," which is ",Object(r.b)("inlineCode",{parentName:"li"},"true"),'\nwhen reduce motion is enabled (or when "Transition Animation Scale" in\n"Developer options" is "Animation off") and ',Object(r.b)("inlineCode",{parentName:"li"},"false")," otherwise."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"screenReaderChanged(bool => unit)"),": Fires when state of the screen reader\nchanges. The argument to the event handler is a ",Object(r.b)("inlineCode",{parentName:"li"},"bool")," which is ",Object(r.b)("inlineCode",{parentName:"li"},"true")," when a\nscreen reader is enabled and ",Object(r.b)("inlineCode",{parentName:"li"},"false")," otherwise."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"reduceTransparencyChanged(bool => unit)"),": ",Object(r.b)("em",{parentName:"li"},"iOS only"),". Fires when state of the\nreduce transparency toggle changes. The argument to the event handler is a\n",Object(r.b)("inlineCode",{parentName:"li"},"bool")," which is ",Object(r.b)("inlineCode",{parentName:"li"},"true")," when reduce transparency is enabled and ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"\notherwise."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"announcementFinished(announcementResult => unit)"),": ",Object(r.b)("em",{parentName:"li"},"iOS only"),". Fires when the\nscreen reader has finished making an announcement. The argument to the event\nhandler is of type ",Object(r.b)("a",{parentName:"li",href:"#announcementResult"},Object(r.b)("inlineCode",{parentName:"a"},"announcementResult")),".")),Object(r.b)("h3",{id:"removeeventlistener"},Object(r.b)("inlineCode",{parentName:"h3"},"removeEventListener")),Object(r.b)("p",null,"To remove an event handler."),Object(r.b)("p",null,"See ",Object(r.b)("a",{parentName:"p",href:"#addEventListener"},Object(r.b)("inlineCode",{parentName:"a"},"addEventListener"))," for more details on supported\nevents."))}b.isMDXComponent=!0},189:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var i=t(0),a=t.n(i);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),b=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=b(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=b(t),u=i,m=d["".concat(c,".").concat(u)]||d[u]||p[u]||r;return t?a.a.createElement(m,l(l({ref:n},s),{},{components:t})):a.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,c=new Array(r);c[0]=u;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,c[1]=l;for(var s=2;s<r;s++)c[s]=t[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);