(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{169:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return s}));var n=r(3),o=r(7),a=(r(0),r(189)),l={id:"platformcolor",title:"PlatformColor",officialDoc:"https://reactnative.dev/docs/platformcolor"},i={unversionedId:"platformcolor",id:"platformcolor",isDocsHomePage:!1,title:"PlatformColor",description:"Functions to access native colors on the target platform by supplying the native color\u2019s corresponding value.",source:"@site/docs/platformcolor.md",sourceDirName:".",slug:"/platformcolor",permalink:"/docs/platformcolor",editUrl:"https://github.com/rescript-react-native/rescript-react-native.github.io/edit/src/docs/platformcolor.md",version:"current",frontMatter:{id:"platformcolor",title:"PlatformColor",officialDoc:"https://reactnative.dev/docs/platformcolor"},sidebar:"api",previous:{title:"Platform",permalink:"/docs/platform"},next:{title:"Settings",permalink:"/docs/settings"}},c=[{value:"Ios",id:"ios",children:[{value:"Ios.get",id:"iosget",children:[]}]},{value:"Android",id:"android",children:[{value:"Android.getAttr",id:"androidgetattr",children:[]},{value:"Android.getColor",id:"androidgetcolor",children:[]},{value:"Android.get",id:"androidget",children:[]}]},{value:"unsafeGet",id:"unsafeget",children:[{value:"unsafeGet{n}",id:"unsafegetn",children:[]},{value:"unsafeGetMultiple",id:"unsafegetmultiple",children:[]}]},{value:"Example",id:"example",children:[]}],d={toc:c};function s(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},d,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Functions to access native colors on the target platform by supplying the native color\u2019s corresponding value."),Object(a.b)("h2",{id:"ios"},"Ios"),Object(a.b)("h3",{id:"iosget"},"Ios.get"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Ios.get")," is used to get color information from UI Element Colors."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-rescript"},"get: Ios.t => Color.t\n")),Object(a.b)("h4",{id:"iosgetn"},"Ios.get{n}"),Object(a.b)("p",null,"Methods to send fallbacks."),Object(a.b)("h2",{id:"android"},"Android"),Object(a.b)("h3",{id:"androidgetattr"},"Android.getAttr"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Android.getAttr")," is used to get color information from android attributes."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-rescript"},"getAttr: Android.t => Color.t\n")),Object(a.b)("p",null,"See: ",Object(a.b)("a",{parentName:"p",href:"https://developer.android.com/reference/android/R.attr"},"R.attr")),Object(a.b)("h3",{id:"androidgetcolor"},"Android.getColor"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Android.getColor")," is used to get color information from android colors."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-rescript"},"getColor: Android.t => Color.t\n")),Object(a.b)("p",null,"See: ",Object(a.b)("a",{parentName:"p",href:"https://developer.android.com/reference/android/R.color"},"R.color")),Object(a.b)("h3",{id:"androidget"},"Android.get"),Object(a.b)("p",null,"Allow to get color or attr."),Object(a.b)("h4",{id:"androidgetn"},"Android.get{n}"),Object(a.b)("p",null,"You may want to get multiple platform colors in case one is not supported by the system. In this case, you can use the ",Object(a.b)("inlineCode",{parentName:"p"},"get{n}")," function to retrieve the values. You can mix and match Android color and attributes in this call. The first value will be treated as default and rest will be treated as fallback."),Object(a.b)("p",null,"Defined up to 7 arguments."),Object(a.b)("h2",{id:"unsafeget"},"unsafeGet"),Object(a.b)("p",null,"Depending on platform & OS version (and for Android you can have user-defined attrs for colors), this function is used for getting platform colors from strings."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-rescript"},"unsafeGet: string => Color.t\n")),Object(a.b)("h3",{id:"unsafegetn"},"unsafeGet{n}"),Object(a.b)("p",null,"The unsafe version of ",Object(a.b)("inlineCode",{parentName:"p"},"get{n}")," where a string can be passed in. This can be any Android resource query, for example: ",Object(a.b)("inlineCode",{parentName:"p"},"?attr/colorPrimary")," or ",Object(a.b)("inlineCode",{parentName:"p"},"?android:attr/colorPrimary"),", even resources defined within your Android app. The first value will be treated as default and rest will be treated as fallback."),Object(a.b)("p",null,"Defined up to 7 arguments."),Object(a.b)("h3",{id:"unsafegetmultiple"},"unsafeGetMultiple"),Object(a.b)("p",null,"The array version of ",Object(a.b)("inlineCode",{parentName:"p"},"unsafeGet{n}")," supporting arbitrary number of fallbacks."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-rescript"},"unsafeGetMultiple: array(string) => Color.t\n")),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-rescript"},'open ReactNative\nlet styles = {\n  open Style\n  StyleSheet.create({\n    "container": style(\n      ~color=switch Platform.os {\n      | os if os == Platform.android =>\n        PlatformColor.Android.get2(#primary_text_dark, #colorPrimary)\n      | os if os == Platform.ios => PlatformColor.Ios.get(#label)\n      | _ => "black"\n      },\n    ),\n  })\n}\n')))}s.isMDXComponent=!0},189:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return f}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=o.a.createContext({}),s=function(e){var t=o.a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return o.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(r),b=n,f=p["".concat(l,".").concat(b)]||p[b]||u[b]||a;return r?o.a.createElement(f,i(i({ref:t},d),{},{components:r})):o.a.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var d=2;d<a;d++)l[d]=r[d];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);